Index: academy/mindswap/Server/Game.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package academy.mindswap.Server;\r\nimport academy.mindswap.Server.deck.*;\r\nimport academy.mindswap.commands.Command;\r\nimport academy.mindswap.utils.ColorCodes;\r\nimport academy.mindswap.utils.Messages;\r\n\r\nimport java.io.*;\r\nimport java.net.ServerSocket;\r\nimport java.net.Socket;\r\nimport java.util.*;\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\n\r\n/**\r\n * Poker Game v1.01\r\n * Creates a server that can run poker games\r\n * BUGS TO FIX:\r\n * - When player exits, the lists get fucked ***FIXED***\r\n * - There's a line between lines and player commands\r\n * - PLayers can play with credits < 1\r\n *\r\n */\r\n\r\npublic class Game {\r\n\r\n    private List<PlayerHandler> listOfPlayers;\r\n    private final int PORT = 8081;\r\n    private ExecutorService service;\r\n    private final int userLimit;\r\n    private Deck deck;\r\n    private Set<Card> tableCards;\r\n    private boolean[] gameDecisionsVerification;\r\n    private boolean[] roundOverVerification;\r\n    private double pot;\r\n    private List<Integer> playerHands;\r\n    private int playerHandCount;\r\n\r\n    public Game(int tableLimit) {\r\n\r\n        this.listOfPlayers = Collections.synchronizedList(new ArrayList<>());\r\n        this.userLimit = tableLimit;\r\n        this.deck = DeckFactory.createFullDeck();\r\n        this.tableCards = Collections.synchronizedSet(new HashSet<>());\r\n        this.gameDecisionsVerification = new boolean[userLimit];\r\n        this.roundOverVerification = new boolean[userLimit];\r\n        this.playerHands = Collections.synchronizedList(new ArrayList<>());\r\n\r\n    }\r\n\r\n    public void startServer() throws IOException {\r\n\r\n        ServerSocket serverSocket = new ServerSocket(PORT);\r\n\r\n        System.out.println(\"Server initiated. Waiting for users to connect.\");\r\n\r\n        service = Executors.newCachedThreadPool();\r\n\r\n        while(listOfPlayers.size() < userLimit) {\r\n            service.submit(new PlayerHandler(serverSocket.accept()));\r\n        }\r\n    }\r\n\r\n    private void addPlayer(PlayerHandler player) {\r\n        this.listOfPlayers.add(player);\r\n    }\r\n\r\n    private void removePlayer(PlayerHandler player) {\r\n        this.listOfPlayers.remove(player);\r\n    }\r\n\r\n    private boolean checkIfPlayerExists(PlayerHandler player) {\r\n        return listOfPlayers.contains(player);\r\n    }\r\n\r\n    private int currentPlayersConnected() {\r\n        return listOfPlayers.size();\r\n    }\r\n\r\n    private boolean isGameUnderWay() {\r\n        return this.deck.getDeckSize() < 52;\r\n    }\r\n\r\n    public void broadCastMessage(String message) {\r\n        for(PlayerHandler player : listOfPlayers) {\r\n            try {\r\n                player.sendMessage(message);\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    private synchronized void dealTableCards() {\r\n\r\n        for (int i = 0; i < 5; i++) {\r\n            Card[] cardArray = deck.getDeck().toArray(new Card[deck.getDeckSize()]);\r\n            Card bufferCard = cardArray[(int) (Math.random() * deck.getDeckSize())];\r\n            deck.removeCard(bufferCard);\r\n            tableCards.add(bufferCard);\r\n        }\r\n\r\n    }\r\n\r\n    private boolean havePlayersSeenHands() {\r\n        int count = 0;\r\n        for(PlayerHandler player : listOfPlayers) {\r\n            count += player.seenHand;\r\n        }\r\n\r\n        return count == currentPlayersConnected();\r\n    }\r\n\r\n    protected int getWinningPlayerIndex() {\r\n\r\n       int winningPoints = playerHands.stream()\r\n                .reduce(0, Math::max);\r\n\r\n       return playerHands.indexOf(winningPoints);\r\n\r\n    }\r\n\r\n    private void startNewRound() {\r\n        deck = DeckFactory.createFullDeck();\r\n        pot = 0;\r\n        tableCards = Collections.synchronizedSet(new HashSet<>(5));\r\n        gameDecisionsVerification = new boolean[userLimit];\r\n        roundOverVerification = new boolean[userLimit];\r\n        playerHandCount = 0;\r\n\r\n        for (int i = 0; i < playerHands.size(); i++) {\r\n            playerHands.set(i,0);\r\n        }\r\n\r\n    }\r\n\r\n    public class PlayerHandler implements Runnable {\r\n\r\n        private final Socket socket;\r\n        private BufferedWriter out;\r\n        private Scanner in;\r\n        private String message;\r\n        private String username;\r\n        private double credits;\r\n        private ArrayList<Card> playerCards;\r\n        private double bet;\r\n        private int index;\r\n        private boolean hasPlayerFolded;\r\n        private int seenHand;\r\n\r\n        private PlayerHandler(Socket socket) {\r\n            this.playerCards = new ArrayList<>(2);\r\n            this.socket = socket;\r\n            this.index = -1;\r\n        }\r\n\r\n        public String getUsername() {\r\n            return username;\r\n        }\r\n\r\n        public int getIndex() {\r\n            return index;\r\n        }\r\n\r\n        @Override\r\n        public boolean equals(Object o) {\r\n            if (this == o) return true;\r\n            if (!(o instanceof PlayerHandler)) return false;\r\n            PlayerHandler that = (PlayerHandler) o;\r\n            return username.equals(that.username);\r\n        }\r\n\r\n        @Override\r\n        public int hashCode() {\r\n            return Objects.hash(username);\r\n        }\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n\r\n                in = new Scanner(socket.getInputStream());\r\n                out = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));\r\n\r\n                System.out.println(Messages.CONNECTING);\r\n\r\n                while(!socket.isClosed()) {\r\n\r\n                    // Get player username\r\n                    while (message == null && username == null) {\r\n                        message = in.nextLine();\r\n                        System.out.printf(\"User: %s has connected.%n\", message);\r\n                        username = message;\r\n                        message = null;\r\n                        break;\r\n                    }\r\n                    // Get player credits\r\n                    while (message == null && credits == 0.0) {\r\n                        message = in.nextLine();\r\n                        credits = Double.parseDouble(message);\r\n                        System.out.printf(Messages.PLAYER_CREDITS_ENTER, credits);\r\n                        message = null;\r\n                        break;\r\n                    }\r\n\r\n                    int counter = 0;\r\n\r\n                    System.out.println(\"Placing player in table...\");\r\n                    while(isGameUnderWay()) {\r\n                        if(counter == 0) {\r\n                            sendMessage(Messages.WAITING_FOR_ROUND);\r\n                            counter++;\r\n                        }\r\n                    }\r\n                    if(index == -1) {\r\n                        synchronized (playerHands) {\r\n                            addPlayer(this);\r\n                            playerHands.add(0);\r\n                            index = playerHands.size() - 1;\r\n                        }\r\n                    }\r\n\r\n                    while (currentPlayersConnected() <= 1) {\r\n                        if(counter == 0){\r\n                            System.out.println(Messages.WAITING_FOR_PLAYERS);\r\n                            sendMessage(Messages.WAITING_FOR_PLAYERS);\r\n                            counter++;\r\n                        }\r\n                        loading();\r\n                    }\r\n\r\n                    counter = 0;\r\n\r\n                    sendMessage(Messages.STARTING_ROUND);\r\n\r\n                    Thread.sleep((long) (Math.random() * 500));\r\n\r\n                    givePlayerCards();\r\n\r\n                    playerHandCount += 2;\r\n\r\n                    System.out.println(\"Time: \" + System.currentTimeMillis());\r\n\r\n                    if(playersHaveCards()) {\r\n                        synchronized (tableCards){\r\n                            if(tableCards.isEmpty()) {\r\n                                dealTableCards();\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    Thread.sleep((long) (Math.random() * 100));\r\n\r\n                    System.out.println(printCards(tableCards));\r\n\r\n                    Thread.sleep((long) (Math.random() * 100));\r\n\r\n                    sendMessage(printCards(playerCards));\r\n\r\n                    Thread.sleep((long) (Math.random() * 250));\r\n\r\n                    sendMessage(Messages.PLAYER_CALL);\r\n\r\n                    System.out.println(\"Waiting for player choices...\");\r\n\r\n                    String playerChoice = in.nextLine();\r\n\r\n                    if(playerChoice != null) {\r\n\r\n                        dealWithCommand(playerChoice);\r\n\r\n                        synchronized (gameDecisionsVerification) {\r\n                            System.out.println(\"Player decided.\");\r\n                            gameDecisionsVerification[index] = true;\r\n                        }\r\n                    }\r\n\r\n                    Thread.sleep((long) (Math.random() * 100));\r\n\r\n                    while(!checkIfPlayersMadeDecision()) {\r\n                        if(counter == 0) {\r\n                            System.out.println(Messages.WAITING_FOR_NEXT_ROUND);\r\n                            sendMessage(Messages.WAITING_FOR_NEXT_ROUND);\r\n                            counter++;\r\n                        }\r\n                    }\r\n\r\n                    System.out.println(\"Players made their decision.\");\r\n\r\n                    sendMessage(\"Cards in table: \\n\" + printCards(tableCards));\r\n\r\n                    int points = 0;\r\n\r\n                    if(!hasPlayerFolded) {\r\n                        points = analyzePlayerHand();\r\n                        Thread.sleep((long) (Math.random() * 100));\r\n                        playerHands.set(index, points);\r\n\r\n                        pot += bet;\r\n                    }\r\n\r\n                    seenHand++;\r\n\r\n                    System.out.println(username + \" has \" + points);\r\n\r\n                    sendMessage(\"You've got a \" +  getStringHand(points) + \"!\");\r\n\r\n                    sendMessage(printCards(getFinalHand()));\r\n\r\n                    counter = 0;\r\n                    while (!havePlayersSeenHands()) {\r\n                        if(counter == 0) {\r\n                            sendMessage(Messages.WAITING_TO_SEE_HAND);\r\n                            counter++;\r\n                        }\r\n                    }\r\n\r\n                    if(getWinningPlayerIndex() == index) {\r\n                        System.out.println(username + \" won!\");\r\n                        sendMessage(Messages.WINNER + (pot - bet) + \" credits.\");\r\n                    } else {\r\n                        System.out.println(username + \" lost :(\");\r\n                        sendMessage(Messages.LOSER + bet + \" credits.\");\r\n                    }\r\n\r\n                    System.out.println(Messages.CHECK_PLAYER);\r\n                    String playerDecision = null;\r\n                    if(in.hasNextLine()) {\r\n                        playerDecision = in.nextLine();\r\n                    }\r\n\r\n                    System.out.println(\"Player decided: \" + playerDecision);\r\n\r\n                    if(playerDecision.equalsIgnoreCase(\"exit\")) {\r\n                        playerHands.remove(index);\r\n                        removePlayer(this);\r\n                        System.out.println(Messages.PLAYER_DISCONNECTED);\r\n                        break;\r\n                    }\r\n\r\n                    roundOverVerification[index] = true;\r\n                    counter = 0;\r\n\r\n                    while(!havePlayersDecidedToPlay()) {\r\n                        if(counter == 0) {\r\n                            sendMessage(Messages.WAITING_FOR_NEXT_ROUND);\r\n                            counter++;\r\n                        }\r\n                        if(havePlayersDecidedToPlay()) break;\r\n                    }\r\n                    restartTable();\r\n                }\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            } finally {\r\n                try {\r\n                    playerHands.remove(index);\r\n                    removePlayer(this);\r\n                    socket.close();\r\n\r\n                } catch (IOException e) {\r\n                    System.out.println(Messages.PLAYER_DISCONNECTED);\r\n                }\r\n            }\r\n        }\r\n\r\n        public synchronized void givePlayerCards() {\r\n\r\n            CardRank[] cardRank = CardRank.values();\r\n            CardSuit[] suitSuit = CardSuit.values();\r\n\r\n            for (int i = 0; i < 2; i++) {\r\n                Card bufferCard = new Card(\r\n                        cardRank[(int) (Math.random() * cardRank.length)],\r\n                        suitSuit[(int) (Math.random() * suitSuit.length)]);\r\n\r\n                if(deck.getDeck().contains(bufferCard)) {\r\n                    deck.removeCard(bufferCard);\r\n                    playerCards.add(bufferCard);\r\n                    continue;\r\n                }\r\n                i--;\r\n            }\r\n        }\r\n\r\n        private String printCards(Collection<Card> cardList) {\r\n\r\n            StringBuilder cardString = new StringBuilder();\r\n\r\n            String whiteBG = ColorCodes.WHITE_BACKGROUND_BRIGHT;\r\n            String black = ColorCodes.BLACK_BOLD;\r\n            String red = ColorCodes.RED_BOLD_BRIGHT;\r\n            String reset = ColorCodes.RESET;\r\n\r\n            for(Card card : cardList) {\r\n\r\n                int isTen = card.getCardRank().equals(CardRank.TEN) ? 1 : 0;\r\n                String color;\r\n                cardString.append(whiteBG);\r\n\r\n                if(card.getCardSuit().equals(CardSuit.SPADES) || card.getCardSuit().equals(CardSuit.CLUBS)) {\r\n                    color = black;\r\n                } else {\r\n                    color = red;\r\n                }\r\n\r\n                cardString.append(color);\r\n                cardString.append(card.getCardRank().getCardRankDigit());\r\n                cardString.append(whiteBG);\r\n                cardString.append(\" \".repeat(3 - isTen));\r\n                cardString.append(whiteBG);\r\n                cardString.append(color);\r\n                cardString.append(card.getCardSuit().getSuit());\r\n                cardString.append(reset);\r\n                cardString.append(\" \".repeat(3));\r\n\r\n            }\r\n\r\n            cardString.append(\"\\n\");\r\n\r\n            for(Card card : cardList) {\r\n\r\n                String color;\r\n                cardString.append(whiteBG);\r\n\r\n                if(card.getCardSuit().equals(CardSuit.SPADES) || card.getCardSuit().equals(CardSuit.CLUBS)) {\r\n                    color = black;\r\n                } else {\r\n                    color = red;\r\n                }\r\n\r\n                cardString.append(whiteBG);\r\n                cardString.append(\"  \");\r\n                cardString.append(whiteBG);\r\n                cardString.append(color);\r\n                cardString.append(card.getCardSuit().getSuit());\r\n                cardString.append(whiteBG);\r\n                cardString.append(\"  \");\r\n                cardString.append(reset);\r\n                cardString.append(\" \".repeat(3));\r\n\r\n            }\r\n\r\n            cardString.append(\"\\n\");\r\n\r\n            for(Card card : cardList) {\r\n                String color;\r\n                int isTen = card.getCardRank().equals(CardRank.TEN) ? 1 : 0;\r\n                cardString.append(whiteBG);\r\n\r\n                if(card.getCardSuit().equals(CardSuit.SPADES) || card.getCardSuit().equals(CardSuit.CLUBS)) {\r\n                    color = black;\r\n                } else {\r\n                    color = red;\r\n                }\r\n                cardString.append(whiteBG);\r\n                cardString.append(color);\r\n                cardString.append(card.getCardSuit().getSuit());\r\n                cardString.append(whiteBG);\r\n                cardString.append(\" \".repeat(3 - isTen));\r\n                cardString.append(whiteBG);\r\n                cardString.append(color);\r\n                cardString.append(card.getCardRank().getCardRankDigit());\r\n                cardString.append(reset);\r\n                cardString.append(\" \".repeat(3));\r\n\r\n            }\r\n\r\n            cardString.append(\"\\n\");\r\n\r\n            return cardString.toString();\r\n        }\r\n\r\n        private synchronized boolean checkIfPlayersMadeDecision() {\r\n            int trues = 0;\r\n            for(boolean b : gameDecisionsVerification) {\r\n                if(b) trues++;\r\n            }\r\n            return trues == currentPlayersConnected();\r\n        }\r\n\r\n        private int analyzePlayerHand() {\r\n            System.out.println(\"I got in analyze\");\r\n            return HandAnalyzer.analyzeHand(this.playerCards, tableCards);\r\n        }\r\n\r\n        private ArrayList<Card> getFinalHand() {\r\n            return HandAnalyzer.makeFinalHand(playerHands.get(index), playerCards, tableCards);\r\n        }\r\n\r\n        private String getStringHand(int points) {\r\n\r\n            if(points > 2000) {\r\n                return \"Four of a kind\";\r\n            }\r\n            if(points > 1500) {\r\n                return \"Full house\";\r\n            }\r\n            if(points > 1000) {\r\n                return \"Flush\";\r\n            }\r\n            if(points > 750) {\r\n                return \"Straight\";\r\n            }\r\n            if(points > 500) {\r\n                return \"Triplet\";\r\n            }\r\n            if(points > 300) {\r\n                return \"Double pair\";\r\n            }\r\n            if(points > 150) {\r\n                return \"Pair\";\r\n            }\r\n            return \"High card\";\r\n        }\r\n\r\n        private boolean havePlayersDecidedToPlay() {\r\n            int trues = 0;\r\n            for(boolean b : roundOverVerification) {\r\n                if(b) trues++;\r\n            }\r\n//            System.out.println(\"Trues: \" + trues);\r\n//            System.out.println(\"PLayers: \" + listOfPlayers.size());\r\n//            System.out.println(\"PLayersIndex: \" + playerHands.size());\r\n\r\n            return trues == playerHands.size();\r\n        }\r\n\r\n        private void sendMessage(String message) throws IOException {\r\n\r\n            out.write(message);\r\n            out.newLine();\r\n            out.flush();\r\n\r\n        }\r\n\r\n        private boolean playersHaveCards() {\r\n            return (playerHandCount / 2) == listOfPlayers.size();\r\n        }\r\n\r\n        private void dealWithCommand(String action) {\r\n\r\n            Command command = Command.getCommandFromDescription(action);\r\n\r\n            command.getCommandHandler().execute(Game.this, this);\r\n\r\n        }\r\n\r\n        public void fold() {\r\n            this.hasPlayerFolded = true;\r\n        }\r\n\r\n        public void setBet(double bet) {\r\n            this.bet = bet;\r\n        }\r\n\r\n        public double getCredits() {\r\n            return credits;\r\n        }\r\n\r\n        public void askForBet() throws IOException {\r\n            sendMessage(Messages.INSERT_BET);\r\n            bet = Double.parseDouble(in.nextLine());\r\n        }\r\n\r\n        public double getBet() {\r\n            return bet;\r\n        }\r\n\r\n        private void loading() throws IOException, InterruptedException {\r\n            long animationSpeed = 800;\r\n            String black = ColorCodes.BLACK_BOLD;\r\n            String red = ColorCodes.RED_BOLD_BRIGHT;\r\n            String reset = ColorCodes.RESET;\r\n            StringBuilder loadingAnimation = new StringBuilder();\r\n            while(currentPlayersConnected() <= 1) {\r\n\r\n                Thread.sleep(animationSpeed);\r\n                sendMessage(\"\\b\" + black + CardSuit.CLUBS.getSuit());\r\n\r\n                Thread.sleep(animationSpeed);\r\n                sendMessage(\"\\b\" + red + CardSuit.HEARTS.getSuit());\r\n\r\n                Thread.sleep(animationSpeed);\r\n                sendMessage(\"\\b\" + black + CardSuit.SPADES.getSuit());\r\n\r\n                Thread.sleep(animationSpeed);\r\n                sendMessage(\"\\b\" + red + CardSuit.DIAMONDS.getSuit());\r\n\r\n            }\r\n\r\n        }\r\n\r\n        private void restartTable() {\r\n            bet = 0;\r\n            seenHand--;\r\n            playerCards = new ArrayList<>(2);\r\n            hasPlayerFolded = false;\r\n            startNewRound();\r\n        }\r\n\r\n        protected int getSeenHand() {\r\n            return seenHand;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/academy/mindswap/Server/Game.java b/academy/mindswap/Server/Game.java
--- a/academy/mindswap/Server/Game.java	(revision 6fbed954e18681e28c878e2ac35cbeef0e5eb852)
+++ b/academy/mindswap/Server/Game.java	(date 1645727214308)
@@ -51,7 +51,7 @@
 
         ServerSocket serverSocket = new ServerSocket(PORT);
 
-        System.out.println("Server initiated. Waiting for users to connect.");
+        System.out.println("Server initiated. Waiting for users.txt to connect.");
 
         service = Executors.newCachedThreadPool();
 
Index: academy/mindswap/Client/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package academy.mindswap.Client;\r\nimport academy.mindswap.utils.Messages;\r\n\r\nimport java.io.*;\r\nimport java.net.Socket;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.util.HashMap;\r\nimport java.util.Scanner;\r\nimport java.util.regex.Pattern;\r\n\r\npublic class Player {\r\n\r\n    private Socket socket;\r\n    private final String hostName = \"localhost\";\r\n    private final int portNumber = 8081;\r\n    private String clientUsername;\r\n    private double credits;\r\n    private BufferedReader bufferedReader;\r\n    private volatile boolean isRoundOver;\r\n    private volatile boolean hasRoundStarted;\r\n\r\n    public Player() {\r\n        try {\r\n            this.socket = new Socket(hostName, portNumber);\r\n            askForUserNameAndCredits();\r\n\r\n        } catch (IOException e) {\r\n            System.out.println(\"Couldn't connect.\");\r\n            closeAll();\r\n        }\r\n    }\r\n\r\n    public void connectToServer ()  throws IOException {\r\n\r\n        readDatabase();\r\n        Scanner in = new Scanner(socket.getInputStream());\r\n        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));\r\n        new Thread(new ConnectionHandler(this.socket, out)).start();\r\n\r\n        while (in.hasNextLine()) {\r\n            String serverMessage = in.nextLine();\r\n\r\n            if(serverMessage.contains(\"\\b\")) {\r\n                System.out.print(serverMessage);\r\n                continue;\r\n            }\r\n            System.out.println(serverMessage);\r\n\r\n            if(serverMessage.startsWith(\"You lost\")) {\r\n\r\n                serverMessage = serverMessage.replace(Messages.LOSER,\"\")\r\n                        .replace(\" credits.\",\"\");\r\n\r\n                credits -= Double.parseDouble(serverMessage);\r\n                System.out.printf(Messages.CURRENT_CREDITS, credits);\r\n                isRoundOver = true;\r\n                hasRoundStarted = false;\r\n                continue;\r\n\r\n            }\r\n\r\n            if(serverMessage.startsWith(\"Congrats\")) {\r\n\r\n                serverMessage = serverMessage.replace(Messages.WINNER,\"\")\r\n                        .replace(\" credits.\",\"\");\r\n\r\n                credits += Double.parseDouble(serverMessage);\r\n                System.out.printf(Messages.CURRENT_CREDITS, credits);\r\n                isRoundOver = true;\r\n                hasRoundStarted = false;\r\n                continue;\r\n            }\r\n\r\n            if(serverMessage.startsWith(\"Starting round\")) {\r\n                hasRoundStarted = true;\r\n            }\r\n\r\n        }\r\n        socket.close();\r\n    }\r\n\r\n    public boolean checkIfStringIsValidDouble(String doubleString) {\r\n        Pattern regex = Pattern.compile(\"[^0-9]\");\r\n        return regex.matcher(doubleString).find();\r\n    }\r\n\r\n\r\n    public void readDatabase() throws IOException {\r\n        HashMap<String, Integer> hashMap = new HashMap<String, Integer>();\r\n\r\n        Path path = Paths.get(\"C:/Users/Utilizador/Desktop/users.txt\");\r\n        //Files.lines(path).forEach(System.out::println);\r\n        \r\n        }\r\n\r\n\r\n\r\n\r\n\r\n       /* File data = new File(\"C:/Users/Utilizador/Desktop/users\");\r\n\r\n        try {\r\n            FileInputStream dataInput = new FileInputStream(data);\r\n\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        }*/\r\n\r\n    }\r\n\r\n\r\n    class ConnectionHandler implements Runnable {\r\n\r\n        private BufferedReader bufferedReader;\r\n        private BufferedWriter bufferedWriter;\r\n        private Socket socket;\r\n\r\n\r\n        private ConnectionHandler(Socket socket, BufferedWriter out) {\r\n            this.socket = socket;\r\n            this.bufferedWriter = out;\r\n        }\r\n\r\n        @Override\r\n        public void run () {\r\n            synchronized (this) {\r\n                while (socket.isConnected()) {\r\n                    try {\r\n                        if(socket.isClosed()) {\r\n                            break;\r\n                        }\r\n                        this.bufferedWriter = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));\r\n                        this.bufferedReader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\r\n\r\n                        bufferedWriter.write(clientUsername);\r\n                        bufferedWriter.newLine();\r\n                        bufferedWriter.flush();\r\n\r\n                        bufferedWriter.write(String.valueOf(credits));\r\n                        bufferedWriter.newLine();\r\n                        bufferedWriter.flush();\r\n\r\n\r\n                        while(!socket.isClosed()) {\r\n\r\n                            int counter = 0;\r\n                            while (!hasRoundStarted) {\r\n                                if(counter == 0) {\r\n                                    System.out.println(Messages.WAITING_FOR_ROUND);\r\n                                    counter++;\r\n                                }\r\n                            }\r\n\r\n\r\n                            this.bufferedReader = new BufferedReader(new InputStreamReader(System.in));\r\n                            String call = bufferedReader.readLine();\r\n\r\n                            if(!checkForValidCommand(call)) {\r\n                                System.out.println(Messages.VALID_COMMAND);\r\n                                continue;\r\n                            }\r\n\r\n                            bufferedWriter.write(call);\r\n                            bufferedWriter.newLine();\r\n                            bufferedWriter.flush();\r\n\r\n                            counter = 0;\r\n                            while(!isRoundOver) {\r\n\r\n                                if(call.contains(\"/bet\") && counter == 0) {\r\n                                    String bet = bufferedReader.readLine();\r\n                                    bufferedWriter.write(bet);\r\n                                    bufferedWriter.newLine();\r\n                                    bufferedWriter.flush();\r\n                                    counter++;\r\n\r\n                                }\r\n\r\n                            }\r\n\r\n\r\n\r\n                            System.out.println(Messages.CONTINUE_PLAYING);\r\n                            String decision = bufferedReader.readLine();\r\n\r\n                            if(decision.equalsIgnoreCase(\"exit\")) {\r\n                                bufferedWriter.write(decision);\r\n                                bufferedWriter.newLine();\r\n                                bufferedWriter.flush();\r\n                                closeAll();\r\n                                System.out.println(Messages.PLAYER_DISCONNECTED + clientUsername);\r\n                                break;\r\n                            }\r\n\r\n                            bufferedWriter.write(decision);\r\n                            bufferedWriter.newLine();\r\n                            bufferedWriter.flush();\r\n\r\n                            isRoundOver = false;\r\n\r\n                        }\r\n                    } catch (IOException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n                }\r\n                try {\r\n                    socket.close();\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void askForUserNameAndCredits() throws IOException {\r\n\r\n        this.bufferedReader = new BufferedReader(new InputStreamReader(System.in));\r\n        System.out.println(Messages.ENTER_USERNAME);\r\n        this.clientUsername = bufferedReader.readLine();\r\n        System.out.println(Messages.ENTER_CREDITS);\r\n\r\n        while(credits == 0.0) {\r\n\r\n            String strCredits = bufferedReader.readLine();\r\n\r\n            if(checkIfStringIsValidDouble(strCredits)) {\r\n                System.out.println(Messages.VALID_CREDITS);\r\n                continue;\r\n            }\r\n            this.credits = Double.parseDouble(strCredits);\r\n        }\r\n    }\r\n\r\n    public void closeAll() {\r\n\r\n        try {\r\n            if (bufferedReader != null) {\r\n                bufferedReader.close();\r\n            }\r\n            if (socket != null) {\r\n                socket.close();\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private boolean checkForValidCommand(String command) {\r\n\r\n        return command.equalsIgnoreCase(\"/call\") ||\r\n                command.equalsIgnoreCase(\"/bet\") ||\r\n                command.equalsIgnoreCase(\"/fold\") ||\r\n                command.equalsIgnoreCase(\"/allin\");\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/academy/mindswap/Client/Player.java b/academy/mindswap/Client/Player.java
--- a/academy/mindswap/Client/Player.java	(revision 6fbed954e18681e28c878e2ac35cbeef0e5eb852)
+++ b/academy/mindswap/Client/Player.java	(date 1645727214307)
@@ -4,9 +4,16 @@
 import java.io.*;
 import java.net.Socket;
 import java.nio.file.Files;
+<<<<<<< HEAD
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.HashMap;
+=======
+import java.nio.file.Paths;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+>>>>>>> 850f3e71c77ab13d60fd92b7a556c1761393910b
 import java.util.Scanner;
 import java.util.regex.Pattern;
 
@@ -20,6 +27,7 @@
     private BufferedReader bufferedReader;
     private volatile boolean isRoundOver;
     private volatile boolean hasRoundStarted;
+    private HashMap<String,Double> existingAccounts;
 
     public Player() {
         try {
@@ -34,7 +42,6 @@
 
     public void connectToServer ()  throws IOException {
 
-        readDatabase();
         Scanner in = new Scanner(socket.getInputStream());
         BufferedWriter out = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
         new Thread(new ConnectionHandler(this.socket, out)).start();
@@ -86,6 +93,7 @@
         return regex.matcher(doubleString).find();
     }
 
+<<<<<<< HEAD
 
     public void readDatabase() throws IOException {
         HashMap<String, Integer> hashMap = new HashMap<String, Integer>();
@@ -101,12 +109,36 @@
 
        /* File data = new File("C:/Users/Utilizador/Desktop/users");
 
+=======
+    private void readDatabase() {
+>>>>>>> 850f3e71c77ab13d60fd92b7a556c1761393910b
         try {
-            FileInputStream dataInput = new FileInputStream(data);
+            List<String> listOfUsers = Files.readAllLines(Paths.get("resources/users.txt"));
+            existingAccounts = new HashMap<>();
+            listOfUsers.forEach(s -> existingAccounts.put(s.split("::")[0], Double.parseDouble(s.split("::")[1])));
 
-        } catch (FileNotFoundException e) {
+        } catch (IOException e) {
             e.printStackTrace();
+<<<<<<< HEAD
         }*/
+=======
+        }
+    }
+
+    private void updateDatabase(){
+
+            StringBuilder userString = new StringBuilder();
+            existingAccounts
+                    .forEach((k,v) -> userString.append(k).append("::").append(v).append("\n"));
+        try {
+            FileWriter writer = new FileWriter("resources/users.txt");
+            writer.write(userString.toString());
+            writer.close();
+
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+>>>>>>> 850f3e71c77ab13d60fd92b7a556c1761393910b
 
     }
 
@@ -216,22 +248,23 @@
 
     private void askForUserNameAndCredits() throws IOException {
 
+        readDatabase();
         this.bufferedReader = new BufferedReader(new InputStreamReader(System.in));
         System.out.println(Messages.ENTER_USERNAME);
-        this.clientUsername = bufferedReader.readLine();
-        System.out.println(Messages.ENTER_CREDITS);
-
-        while(credits == 0.0) {
-
-            String strCredits = bufferedReader.readLine();
+        String enteredUsername = bufferedReader.readLine();
 
-            if(checkIfStringIsValidDouble(strCredits)) {
-                System.out.println(Messages.VALID_CREDITS);
-                continue;
+        if (existingAccounts.containsKey(enteredUsername)) {
+            this.clientUsername = enteredUsername;
+            this.credits = existingAccounts.get(enteredUsername);
+            System.out.printf(Messages.USERNAME_ALREADY_EXISTS, this.clientUsername, this.credits);
+        } else {
+            this.clientUsername = enteredUsername;
+            this.credits = 10000;
+            existingAccounts.put(this.clientUsername,this.credits);
+            updateDatabase();
             }
-            this.credits = Double.parseDouble(strCredits);
         }
-    }
+
 
     public void closeAll() {
 
Index: ../resources/users
===================================================================
diff --git a/../resources/users b/../resources/users
deleted file mode 100644
--- a/../resources/users	(revision 6fbed954e18681e28c878e2ac35cbeef0e5eb852)
+++ /dev/null	(revision 6fbed954e18681e28c878e2ac35cbeef0e5eb852)
@@ -1,2 +0,0 @@
-manel::60000
-joao::10000
Index: academy/mindswap/utils/Messages.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package academy.mindswap.utils;\r\n\r\npublic class Messages {\r\n\r\n\r\n    public static final String CONNECTING = \"Connecting player...\";\r\n    public static final String WAITING_FOR_PLAYERS = \"Please wait for another player to connect...\";\r\n    public static final String WAITING_FOR_ROUND = \"Please wait for the current round to be over.\";\r\n    public static final String WAITING_FOR_NEW_ROUND = \"Waiting for new round to start...\";\r\n    public static final String PLAYER_CARDS = \"You have: \\n\";\r\n    public static final String PLAYER_CREDITS_ENTER = \"You entered with %.2f credtis %n\";\r\n    public static final String ENTER_USERNAME = \"Please enter your username: \";\r\n    public static final String ENTER_CREDITS = \"Please enter your CREDITS: \";\r\n    public static final String VALID_CREDITS = \"Please insert a valid amount: \";\r\n    public static final String STARTING_ROUND = \"Starting round, dealing cards...\";\r\n    public static final String PLAYER_DISCONNECTED = \"PLayer disconnected.\";\r\n    public static final String TABLE_CARDS = \"Current cards on table: \\n\";\r\n    public static final String VALID_COMMAND = \"Please insert a valid command: \\n\";\r\n    public static final String WINNER = \"Congrats you win! You've gained \";\r\n    public static final String LOSER = \"You lost better luck next time! You've lost \";\r\n    public static final String NOT_ENOUGH_CREDITS = \"You don't have enough credits to make this bet..\";\r\n    public static final String INSERT_BET = \"Please insert how much you want to bet this round: \";\r\n    public static final String PLACED_BET = \"Bet placed, waiting for all the players to bet...\";\r\n    public static final String CURRENT_CREDITS = \"You know have %.2f credits. %n\";\r\n    public static final String WAITING_FOR_NEXT_ROUND = \"Waiting for players to decide...\";\r\n    public static final String PLAYER_CALL = \"What do you want to do? \\nBET || CALL || ALL-IN || FOLD \\n\";\r\n    public static final String CHECK_PLAYER = \"Reading players decisions...\";\r\n    public static final String FOLDED = \" has folded.\\n\";\r\n    public static final String BET = \" has bet \";\r\n    public static final String ALL_IN = \" went all in with \";\r\n    public static final String WAITING_TO_SEE_HAND = \"Waiting for players too see their hands..\";\r\n    public static final String CREDITS = \" credits!\";\r\n    public static final String CONTINUE_PLAYING = \"Do you want to play another round? \\nType EXIT to leave game, press enter to play another round. \\n\";\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/academy/mindswap/utils/Messages.java b/academy/mindswap/utils/Messages.java
--- a/academy/mindswap/utils/Messages.java	(revision 6fbed954e18681e28c878e2ac35cbeef0e5eb852)
+++ b/academy/mindswap/utils/Messages.java	(date 1645727214308)
@@ -31,5 +31,6 @@
     public static final String WAITING_TO_SEE_HAND = "Waiting for players too see their hands..";
     public static final String CREDITS = " credits!";
     public static final String CONTINUE_PLAYING = "Do you want to play another round? \nType EXIT to leave game, press enter to play another round. \n";
+    public static final String USERNAME_ALREADY_EXISTS = "Welome %s. You have %.2f credits. %n";
 
 }
Index: ../resources/users.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../resources/users.txt b/../resources/users.txt
new file mode 100644
--- /dev/null	(date 1645727214306)
+++ b/../resources/users.txt	(date 1645727214306)
@@ -0,0 +1,5 @@
+joao::10000.0
+tiago::800.0
+tobias::10000.0
+ze::10000.0
+manel::60000.0
Index: ../.idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ArtifactsWorkspaceSettings\">\r\n    <artifacts-to-build>\r\n      <artifact name=\"client:jar\" />\r\n      <artifact name=\"server:jar\" />\r\n    </artifacts-to-build>\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"5758b74b-1b07-478a-8926-8d348cfc6100\" name=\"Changes\" comment=\"fixes exit 2\">\r\n      <change afterPath=\"$PROJECT_DIR$/resources/users\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/academy/mindswap/Client/Player.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/academy/mindswap/Client/Player.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/academy/mindswap/Server/Game.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/academy/mindswap/Server/Game.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/academy/mindswap/Server/deck/Card.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/academy/mindswap/Server/deck/Card.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Merge.Settings\">\r\n    <option name=\"BRANCH\" value=\"origin/main\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"25QJun9KpnMGEJcKhQwnA3aQFRa\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"project.structure.last.edited\" value=\"Artifacts\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.15\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.20229885\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"academy.mindswap.Client\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.Server\">\r\n    <configuration name=\"HandTester\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"academy.mindswap.Server.deck.HandTester\" />\r\n      <module name=\"FirstProject\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Launch Player 2 client\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"academy.mindswap.Client.LaunchPlayer2\" />\r\n      <module name=\"FirstProject\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Launch Player 3\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"academy.mindswap.Client.LaunchPlayer3\" />\r\n      <module name=\"FirstProject\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Player Client\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"academy.mindswap.Client.Client\" />\r\n      <module name=\"FirstProject\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Server\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"academy.mindswap.Server.Main\" />\r\n      <module name=\"FirstProject\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Launch All players\" type=\"CompoundRunConfigurationType\">\r\n      <toRun name=\"Launch Player 2 client\" type=\"Application\" />\r\n      <toRun name=\"Launch Player 3\" type=\"Application\" />\r\n      <toRun name=\"Player Client\" type=\"Application\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.Player Client\" />\r\n      <item itemvalue=\"Application.Launch Player 2 client\" />\r\n      <item itemvalue=\"Application.Launch Player 3\" />\r\n      <item itemvalue=\"Application.Server\" />\r\n      <item itemvalue=\"Application.HandTester\" />\r\n      <item itemvalue=\"Compound.Launch All players\" />\r\n    </list>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"5758b74b-1b07-478a-8926-8d348cfc6100\" name=\"Changes\" comment=\"\" />\r\n      <created>1645453602083</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1645453602083</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"added factory added new constructor to deck\">\r\n      <created>1645486793962</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645486793962</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"added messages class refined factory\">\r\n      <created>1645487500682</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645487500682</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"added username and credits fetch\">\r\n      <created>1645488055331</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645488055331</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"added username and credits fetch\">\r\n      <created>1645490490430</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645490490430</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"added color codes\">\r\n      <created>1645523670656</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645523670656</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"refactor player\">\r\n      <created>1645524445644</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645524445644</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"updated player client\">\r\n      <created>1645526462116</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645526462116</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"updated player client 2, added username and credits insertion\">\r\n      <created>1645526952252</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645526952252</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"added valid command, player card printer\">\r\n      <created>1645530219207</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645530219207</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"added synchronized verificator\">\r\n      <created>1645531454601</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645531454601</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"added connection handler for client, fixed deal cards to players\">\r\n      <created>1645537684994</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645537684994</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"fixed table cards, fixed player thread, added player handler\">\r\n      <created>1645539120740</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645539120740</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"added bet command, added check for valid double string\">\r\n      <created>1645542281149</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645542281149</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"added hand analyzer\">\r\n      <created>1645546020974</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645546020974</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"upgraded analyzer, added winner checker\">\r\n      <created>1645548065117</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645548065117</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"added new round mechanic\">\r\n      <created>1645550828021</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645550828021</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"added better bet verifications and if player wants to keep playing\">\r\n      <created>1645553708768</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645553708768</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"repaired decisions, upgraded verifications, added credits update\">\r\n      <created>1645555360244</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645555360244</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"last commit before break, needs final player decision to be fixed\">\r\n      <created>1645556366708</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645556366708</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"created more booleans\">\r\n      <created>1645576564459</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645576564459</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"added scanner to playerhandler, fixed decision to keep playing\">\r\n      <created>1645578772822</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645578772822</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"player can join now mid round and keep playing\">\r\n      <created>1645608309944</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645608309944</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"added commands : added broadcast message\">\r\n      <created>1645620289154</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645620289154</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"upgrading table card printer\">\r\n      <created>1645623713145</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645623713145</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"made global printer, updating hand analyzer\">\r\n      <created>1645627945895</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645627945895</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"upgraded hand analyzer\">\r\n      <created>1645650340940</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645650340940</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"commiting before game changes\">\r\n      <created>1645651392857</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645651392857</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"fixed synching problems, fixed final hand display\">\r\n      <created>1645703222506</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645703222506</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"fixes exit 2\">\r\n      <created>1645711989667</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645711989667</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"30\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"origin/main\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_FILTERS\">\r\n      <map>\r\n        <entry key=\"Branch\">\r\n          <value>\r\n            <list>\r\n              <RecentGroup>\r\n                <option name=\"FILTER_VALUES\">\r\n                  <option value=\"origin/main\" />\r\n                </option>\r\n              </RecentGroup>\r\n            </list>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"added synchronized verificator\" />\r\n    <MESSAGE value=\"added connection handler for client, fixed deal cards to players\" />\r\n    <MESSAGE value=\"fixed table cards, fixed player thread, added player handler\" />\r\n    <MESSAGE value=\"added bet command, added check for valid double string\" />\r\n    <MESSAGE value=\"added hand analyzer\" />\r\n    <MESSAGE value=\"upgraded analyzer, added winner checker\" />\r\n    <MESSAGE value=\"added new round mechanic\" />\r\n    <MESSAGE value=\"added better bet verifications and if player wants to keep playing\" />\r\n    <MESSAGE value=\"repaired decisions, upgraded verifications, added credits update\" />\r\n    <MESSAGE value=\"last commit before break, needs final player decision to be fixed\" />\r\n    <MESSAGE value=\"created more booleans\" />\r\n    <MESSAGE value=\"added scanner to playerhandler, fixed decision to keep playing\" />\r\n    <MESSAGE value=\"player can join now mid round and keep playing\" />\r\n    <MESSAGE value=\"fixed some issues\" />\r\n    <MESSAGE value=\"added commands : added broadcast message\" />\r\n    <MESSAGE value=\"upgrading table card printer\" />\r\n    <MESSAGE value=\"upgrading table card printer 2\" />\r\n    <MESSAGE value=\"made global printer, updating hand analyzer\" />\r\n    <MESSAGE value=\"updating hand analyzer\" />\r\n    <MESSAGE value=\"upgraded hand analyzer\" />\r\n    <MESSAGE value=\"commiting before game changes\" />\r\n    <MESSAGE value=\"added hand tester, fixed hand analyzer\" />\r\n    <MESSAGE value=\"fixed synching problems, fixed final hand display\" />\r\n    <MESSAGE value=\"player exit fixed\" />\r\n    <MESSAGE value=\"fixes exit 2\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"fixes exit 2\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../.idea/workspace.xml b/../.idea/workspace.xml
--- a/../.idea/workspace.xml	(revision 6fbed954e18681e28c878e2ac35cbeef0e5eb852)
+++ b/../.idea/workspace.xml	(date 1645727214305)
@@ -7,12 +7,12 @@
     </artifacts-to-build>
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="5758b74b-1b07-478a-8926-8d348cfc6100" name="Changes" comment="fixes exit 2">
-      <change afterPath="$PROJECT_DIR$/resources/users" afterDir="false" />
+    <list default="true" id="5758b74b-1b07-478a-8926-8d348cfc6100" name="Changes" comment="updating hand analyzer">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/resources/users" beforeDir="false" afterPath="$PROJECT_DIR$/resources/users.txt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/academy/mindswap/Client/Player.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/academy/mindswap/Client/Player.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/academy/mindswap/Server/Game.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/academy/mindswap/Server/Game.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/academy/mindswap/Server/deck/Card.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/academy/mindswap/Server/deck/Card.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/academy/mindswap/utils/Messages.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/academy/mindswap/utils/Messages.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
